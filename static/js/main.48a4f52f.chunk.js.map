{"version":3,"sources":["components/Notes/Notes.js","App.js","serviceWorker.js","index.js"],"names":["Notes","props","className","onClick","this","deleteNote","text","Component","App","updateText","e","setState","noteText","target","value","handleKeyPress","key","addNote","deleteNoteHandler","index","noteArray","state","notes","splice","notesArray","console","log","length","push","textInput","focus","isTextAvail","map","note","type","ref","input","onChange","onKeyPress","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kOAwBeA,E,kDApBX,WAAYC,GAAQ,uCACVA,G,qDAON,OACI,yBAAKC,UAAU,OAAOC,QAASC,KAAKH,MAAMI,YACrCD,KAAKH,MAAMK,U,GAXRC,aCiGLC,G,wDA9Fb,WAAYP,GAAQ,IAAD,8BACjB,cAAMA,IAYRQ,WAAa,SAACC,GACV,EAAKC,SAAS,CACZC,SAASF,EAAEG,OAAOC,SAfL,EAqBnBC,eAAe,SAACL,GACD,UAAVA,EAAEM,KACH,EAAKC,WAvBU,EA4BnBC,kBAAkB,SAACC,GACjB,IAAIC,EAAY,EAAKC,MAAMC,MAC3BF,EAAUG,OAAOJ,EAAM,GACvB,EAAKR,SAAS,CACZW,MAAMF,KAhCS,EAqCnBH,QAAQ,WAEN,IAAIO,EAAa,EAAKH,MAAMC,MAC5BG,QAAQC,IAAI,EAAKL,MAAMT,SAASe,QACC,GAA9B,EAAKN,MAAMT,SAASe,QACrBH,EAAWI,KAAK,EAAKP,MAAMT,UAG7Ba,QAAQC,IAAI,eAAeF,GAC3B,EAAKb,SAAS,CACZC,SAAS,KAEX,EAAKiB,UAAUC,SA9Cf,EAAKT,MAAM,CACTT,SAAS,GACTU,MAAM,GACNS,aAAY,GANG,E,qDAuDT,IAAD,OAEHT,EAAQlB,KAAKiB,MAAMC,MAAMU,KAAI,SAACC,EAAKd,GAErC,OACE,kBAAC,EAAD,CAAOH,IAAKG,EAAOb,KAAM2B,EAAM5B,WAAY,kBAAI,EAAKa,kBAAkBC,SAO1E,OACE,yBAAKjB,UAAU,aACb,4BAAQA,UAAU,UAAlB,kBAECoB,EAKD,yBAAKpB,UAAU,MAAMC,QAASC,KAAKa,SAAnC,KACA,2BAAOiB,KAAK,OACZC,IAAK,SAACC,GAAS,EAAKP,UAAYO,GAChCtB,MAAOV,KAAKiB,MAAMT,SAClBV,UAAU,YACVmC,SAAU,SAAA3B,GAAC,OAAE,EAAKD,WAAWC,IAC7B4B,WAAYlC,KAAKW,sB,GAnFPR,cCOEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.48a4f52f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Notes extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"note\" onClick={this.props.deleteNote}>\r\n                {this.props.text}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nNotes.propTypes = {\r\n\r\n};\r\n\r\nexport default Notes;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Notes from \"./components/Notes/Notes\";\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state={\n      noteText:\"\",\n      notes:[],\n      isTextAvail:false\n\n\n    }\n\n  }\n\n  updateText = (e) => {\n      this.setState({\n        noteText:e.target.value\n      })\n   \n  }\n  \n\n  handleKeyPress=(e)=>{\n    if(e.key === \"Enter\"){\n      this.addNote();\n      \n    }\n  }\n\n  deleteNoteHandler=(index)=>{\n    let noteArray = this.state.notes;\n    noteArray.splice(index,1);\n    this.setState({\n      notes:noteArray\n    })\n  }\n\n\n  addNote=()=>{\n    \n    let notesArray = this.state.notes;\n    console.log(this.state.noteText.length);\n    if(this.state.noteText.length != 0){\n      notesArray.push(this.state.noteText);\n    }\n   \n    console.log(\"notes array \"+notesArray);\n    this.setState({\n      noteText:''\n    })\n    this.textInput.focus();\n    \n\n  }\n\n\n  render() {\n\n    let notes = this.state.notes.map((note,index)=>{\n\n      return (\n        <Notes key={index} text={note} deleteNote={()=>this.deleteNoteHandler(index)}/>\n      );\n    })\n\n\n\n\n    return (\n      <div className=\"container\">\n        <header className=\"header\">React todo app</header>\n        \n        {notes}\n \n        \n\n\n        <div className=\"btn\" onClick={this.addNote}>+</div>\n        <input type=\"text\" \n        ref={(input)=>{this.textInput = input}} \n        value={this.state.noteText} \n        className=\"textInput\"\n        onChange={e=>this.updateText(e)}\n        onKeyPress={this.handleKeyPress}\n        />\n\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import \"../node_modules/bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}